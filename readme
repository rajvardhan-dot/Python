# day 3:
# modules and pip
# modules is use to borrow others code
# two types of modules
# 1)external : written by user (phone is the example, we dont know implementatio)
# 2) Built-in modules: install by pip(no need to install externally) these are already present module in python
# pip install pandas means i want to install a package name pandas, use for data analysis
# pip is package manager , means whatever things u wnat pip will bring and you can use that.

# day 4:

# a sequence of instruction will get evaluate using python

# day 5:
# escapse sequence , print , comments
# \n = escape
# ctrl + / = for commmet multiple lines
# \"rajvardhan\" = backslash use to put sentense in a string we can give 

# day 6:
# about variables: container who hold data
# int , string , float , double , char, boolean.
# *concatanation is possible between same type of data type variable
# *type(a) = use to know the type of variable
# *sequence data -> list , tuple
# *list is mutable(can be change) , tuple is immutable(can not change )
# *list is collection of different data element
# *dictionary datatype = data will store in key value pair(mapping);
# ***in python everything is a object***

# day7:
# Operators:
# 1)Arithmetic operators
# 2)Assignment operators
# 3)Comparison operators
# 4)Logical operators
# 5)Identity operators
# 6)Membership operators
# 7)Bitwise operators 

# print(15 // 6) : floor division operator means when you want floor value
# print(15 % 6) : modulus operator means when you want remainder value
# print(15 ** 6) : power operator means when you want power value

# print("the value of " , a , "+" , b,"is:",a+b) : concatenation

# day8:
# ***alt+shift+downarrow-> line will replicate***
# ***alt+shift+uparrow-> line will delete***

# day9:
# *typecasting: conversion of one datatype to other called typecasting
# *explicit conversion: when i will do conversion
# *implicit conversion: when python will do conversion
# *implicit conversion is not possible in python
# * according to the level in implicit one datatype convert to other type
# *pyhton convert smaller datatype to a higher datatype
# *int to float

# day10:
# user input
# *input() function is used to take input from user
# *input() function will take input as string
# *int(input()) function will take input as integer
# *float(input()) function will take input as float

# day11:
# string in python
# *string is a sequence of character
# *no functional difference between single quote and double quote

# types to print string
# single quote in last and double in between
# both side double quote
# both side triple quote to print large para with single and double quote
# #silicing in string
# print("hello"[0]) : to print first character
# #looping in string
# for i in "hello":
# print(i) : to print all character

# day12:
# len() : function
# slicing : square bracket use for slicing
# string is immutable

# day13:
# if else conditional statement in python

# all string function to perform with the str
# strip(): Removes characters from both ends.
# lstrip(): Removes characters from the beginning (left side).
# rstrip(): Removes characters from the end (right side).

#day14:
if else statement

#day15
excercise

#day16
about match case

day17
about looping statement

day 18

day 19

day20:
    functions:
        # use of pass in python is to tell program that skip this functiona and go for the next function execution 
        #later i will write this function
        #function is use to divide bigger problem into smaller
functions are two types:
    built-in: min,max,range,tuples,dict
    user define: by using def keyword


day 21:
    function argument (how to pass in the function)
    There are four types of arguments that we can provide in a function:

Default Arguments
Keyword Arguments
Variable length Arguments
Required Arguments

def name(*name): use to store tuple values
def name(**name):use to store value in the form of dcintionary 

day22:
    #about list uses
    #list comprehension
    #List Comprehension
List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.
    
    
day23:
    list method
    sort()
    reverse()
    append()
    index()
    copy()
    insert()
    extend()
    
day24:
    for company program we will use the list
    in case where we dont want to others change the values 
    
day25:
    how we can manipulate the tuple by using the list
    tup()
    temp = list(tup)
    temp.append()
    tup = tuple(temp)
     ex:
         tup = (1,2,5,6,7,8)
            temp = list(tup)
            temp.append(70)
            tup = tuple(temp)
            print(tup)
day26:
    && in python will be and
    
day27:
    kbc game
day28:
    fstring: uses of fstring
    .2f:use to print value till two decimal place
    txt = f"for only {price:.2f} dollars!"
    print(f"hey my name is {{name}}  and I am from {{country}}"): double curly braces use to print as it is


***day29***
 docstring:will use after the declaration of the function, it is use to tell a user about the function that how many argument he needs to give
 we an not ignore docstring like the comments
 just after function name we will write docstring
 
 PEP-8:(python enhancement proposal) provide guidelines to coder
 
 zen of python:
     
 day30:
    Recursion:
        
day31:
    sets: is a collection of well defined object

day32: 
    set function
    #union all common elements in both the sets , union will return
    #new set while update will modify the existing set
    #same for the intersection and intersection update
    III. symmetric_difference and symmetric_difference_update():same like the union does
    symmetric_difference: values which are not present in both set
    IV. difference() and difference_update():
        difference means:: Elements present on one set, but not on the other.
        
    The isdisjoint() method checks if items of given set are present in another set. This method returns False if items are present, else it returns True.
    
    issuperset():
The issuperset() method checks if all the items of a particular set are present in the original set. It returns True if all the items are present, else it returns False.

    issubset():
The issubset() method checks if all the items of the original set are present in the particular set. It returns True if all the items are present, else it returns False.
 
    add()
If you want to add a single item to the set use the add() method.

    update()
If you want to add more than one item, simply create another set or any other iterable object(list, tuple, dictionary), and use the update() method to add it into the existing set

   remove()/discard()
We can use remove() and discard() methods to remove items form list.
   
pop()
This method removes the last item of the se

del
del is not a method, rather it is a keyword which deletes the set entirely.
    
clear():
This method clears all items in the set and prints an empty set.

 Check if item exists
You can also check if an item exists in the set or not.


day33:
    dcintionary
    
day34:
    set unordered and dictionary is unordered
  popitem():
The popitem() method removes the last key-value pair from the dictionary.
pop():
The pop() method removes the key-value pair whose key is passed as a parameter.


clear():
The clear() method removes all the items from the list.
update()
The update() method updates the value of the key provided to it if the item already exists in the dictionary, else it creates a new key-value pai

del:
we can also use the del keyword to remove a dictionary item.

day35:
    else with for and while loop
    
day36:
    Exception
day37:
    finally:mainly use in program for concluding task
    
    
    
day52:
    lambda function: it's means that we are making variable of a function and using
    use it only for one liner solution
    when we pass function as an argument inside another function(most imp use)
    
    # In Python, a lambda function is a small anonymous function without a name. It is defined using the lambda keyword and has the following syntax:
    
    # lambda arguments: expression
# Lambda functions are often used in situations where a small function is required for a short period of time. They are commonly used as arguments to higher-order functions, such as map, filter, and reduce.
     
     day53:
     map is a short form to iterate in a list of item and convert them in any other for
     
     day54:
     both are comparesion operator
     is will compare the exact location of object in the memory 
     == wil compare the value of the object in the memory

example:
a = [1,2,3]
b = [1,2,3]
print(a is b)#exact location of object(false)
print(a == b)#value of the object(True)

    day55:
    game
    
    day56:
    intro to oops and best example is GTA VICE CITY (WORKING OF PLAYER INSIDE THE GAME )
    class in a blueprint
    object are real time entity that we will use to make the function
    
    day57:
    example of class
    class is like a placeholder
    class is like a template
    
    self: means the object for which this method is called, basically current object ko point krta hain
    
    
    day58:
    
    in each and every method we need to give a self inside any method
    constructors called automatically when object create
    it help initialize the Value
    it return None
    
    
    day59:
    Decorators:
    from word only u can understand that to decorate something, so samething we r doing here decorating the function by modifying the other function
    it allows you to modify the behavior of function or method 
    this is the way to ectend the functionality
    
    *args: method of tkaing values in the form of tuples
    **kwargs: method of taking values in the form of dictionary
    
    day60:
    getters (property ka use krke)
    setters (@the_value ka use krke) #value set ke liye
    
    day61:
    inheritance introduction
    types:
    
    day62:
    # pass use to create empty class 
    '''Access specifiers or access modifiers in python programming are used to limit the access of class variables and class methods outside of class while implementing the concepts of inheritance.
    Public Access Specifier in Python
    All the variables and methods (member functions) 
    in python are by default public. Any instance variable in 
    a class followed by the ‘self’ keyword ie. self.var_name are public accessed.'''
    
    In Python, there is no strict concept of "private" access modifiers like in 
    some other programming languages. However, a convention has been established to indicate that a variable 
    or method should be considered private by prefixing its name with a double underscore (__). This is known as a "weak internal use indicator" 
    and it is a convention only, not a strict rule. Code outside the class can still access these "private" variables and methods, but it is generally understood that they should not be accessed or modified.
    
    '''It's important to note that the single underscore is 
    just a naming convention, and does not actually provide any protection or restrict access to the member. 
    The syntax we follow to make any variable protected is to write variable name followed by a single underscore (_) ie. _varName.'''
    
    
    day65:
        '''Static methods in Python are methods that belong to a class rather than 
        an instance of the class. They are defined using the @staticmethod decorator 
        and do not have access to the instance of the class (i.e. self). They are called on the class itself, 
        not on an instance of the class. Static methods are often used to create utility functions that don't need access to instance data.'''
        
    ek aisa method banana chahte ho ki jo bhi class use kre vo iss method ka use kre
    
    day66:
        instances and class variables
        Class variables are defined at the class level and are shared among all instances of the class.
        Instance variables are defined at the instance level and are unique to each instance of the class. They are defined inside the init method and are usually used to store information that is specific to each instance of the class.
        
        
    day69:
        class method provide class inside a method , you can directly change the class variable
        
    day70:
        class method as an alternative constructors
    day71:
        class method as an alternative
       
    '''In Python, there are three built-in functions that are commonly used to get information about objects: dir(), dict, and help().'''
    
    dir:
        dir(): The dir() function returns a list of all the attributes and methods (including dunder methods) available for an object. 
        dict(): The __dict__ attribute returns a dictionary representation of an object's attributes. It is a useful tool for introspection
        
    help():
         help(): The help() function is used to get help documentation for an object, including a description of its attributes and methods
         
    day72:
    when we call method of parent class in child class then we use super keyword
    super keyword is helpful when u want to call a method from one of the parent classes
    
    *The super() keyword in Python is used to refer to the parent class. It is especially useful when a class inherits from multiple parent classes and you want to call a method from one of the parent classes.
    *The super() keyword is also useful when a class inherits from multiple parent classes.
    
    day73:
    These are special methods that you can define in your classes, and when invoked, they give you a powerful way to manipulate objects and their behaviour
    Magic methods, also known as “dunders” from the double underscores surrounding their names, are powerful tools that allow you to customize the behaviour of your classes. They are used to implement special methods such as the addition, subtraction and comparison operators, as well as some more advanced techniques like descriptors and properties.
    
    '''__init__ method
The init method is a special method that is automatically invoked when you create a new instance of a class'''
    
    '''__str__ and __repr__ methods
The str and repr methods are both used to convert an object to a string representation. The str method is used when you want to print out an object, while the repr method is used when you want to get a string representation of an object that can be used to recreate the object.'''

'''__len__ method
The len method is used to get the length of an object. This is useful when you want to be able to find the size of a data structure, such as a list or dictionary.'''

'''__call__ method
The call method is used to make an object callable, meaning that you can pass it as a parameter to a function and it will be executed when the function is called. This is an incredibly powerful tool that allows you to create objects that behave like functions'''


   day74:
   method overriding
   
   day 75:
   project
   
   day76:
   project
   
   day77:
   operator overloading
   
   day78:
   single inheritance
   
   day79:
   more than one class we use in a program and then we wll call them in the child class from the parent class
   
   day80:
   multilevel
   
   day81:
   Hybrid and hierarchical 
   
   day82 and day83:
   project
   
   day84:
   Time Module
   
   day85:
   command line utility
   
   day86:
   walrus operator:
   The main purpose of the walrus operator is to allow assignment within expressions. This means you can assign a value to a variable as part of a larger expression, and then use that variable within the same expression.

Here's a more detailed explanation of the walrus operator:

Syntax:

The syntax of the walrus operator is :=.
It consists of a colon : followed by an equals sign =.

     day87:
     shutil module
     
     day88:
     project
     
     dya89:
     request module
     
     day90:
     news app
     
     day91:
     Generators
     ''' One of the main benefits of generators is that they allow you to generate the values on-the-fly, rather than having to create and store the entire sequence in memory. This makes generators a powerful tool for working with large or complex data sets, as you can generate the values as you need them, rather than having to store them all in memory at once.'''
     
     day92:
     '''Function caching is a technique for improving the performance of a program by storing the results of a function call so that you can reuse the results instead of recomputing them every time the function is called. This can be particularly useful when a function is computationally expensive, or when the inputs to the function are unlikely to change frequently.'''
     
     day93:
     project
     
     day94:
     project
     
     day95:
     Regular expressions
     
     day96:
     Async IO in Python
Asynchronous I/O, or async for short, is a programming pattern that allows for high-performance I/O operations in a concurrent and non-blocking manner. In Python, async programming is achieved through the use of the asyncio module and asynchronous functions.
     
     
     day97:
     jab parallely data download krna ho toh multhreading use krte hain
     Multithreading in Python
Multithreading is a technique in programming that allows multiple threads of execution to run concurrently within a single process. In Python, we can use the threading module to implement multithreading. In this tutorial, we will take a closer look at the threading module and its various functions and how they can be used in Python.


     day98:
     Multiprocessing
     '''Multiprocessing in Python
Multiprocessing is a Python module that provides a simple way to run multiple processes in parallel. It allows you to take advantage of multiple cores or processors on your system and can significantly improve the performance of your code. In this repl, we'll take a closer look at the multiprocessing module and its various functions and how they can be used in Python.'''
     
     day99:
         project
    
    day100;
    THANK YOU
     
     
     
 
   
   